// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/publisher.proto

package publication_manager_publisher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Publisher struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Country              string          `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	Language             string          `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Category             map[string]bool `protobuf:"bytes,5,rep,name=category" json:"category,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Capacity             int32           `protobuf:"varint,6,opt,name=capacity" json:"capacity,omitempty"`
	Commitment           int32           `protobuf:"varint,7,opt,name=commitment" json:"commitment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Publisher) Reset()         { *m = Publisher{} }
func (m *Publisher) String() string { return proto.CompactTextString(m) }
func (*Publisher) ProtoMessage()    {}
func (*Publisher) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_577a7dcfd2c303ff, []int{0}
}
func (m *Publisher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Publisher.Unmarshal(m, b)
}
func (m *Publisher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Publisher.Marshal(b, m, deterministic)
}
func (dst *Publisher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Publisher.Merge(dst, src)
}
func (m *Publisher) XXX_Size() int {
	return xxx_messageInfo_Publisher.Size(m)
}
func (m *Publisher) XXX_DiscardUnknown() {
	xxx_messageInfo_Publisher.DiscardUnknown(m)
}

var xxx_messageInfo_Publisher proto.InternalMessageInfo

func (m *Publisher) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Publisher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Publisher) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Publisher) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Publisher) GetCategory() map[string]bool {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Publisher) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Publisher) GetCommitment() int32 {
	if m != nil {
		return m.Commitment
	}
	return 0
}

type Requirement struct {
	Language             string   `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Category             string   `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	Copies               int32    `protobuf:"varint,3,opt,name=copies" json:"copies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Requirement) Reset()         { *m = Requirement{} }
func (m *Requirement) String() string { return proto.CompactTextString(m) }
func (*Requirement) ProtoMessage()    {}
func (*Requirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_577a7dcfd2c303ff, []int{1}
}
func (m *Requirement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Requirement.Unmarshal(m, b)
}
func (m *Requirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Requirement.Marshal(b, m, deterministic)
}
func (dst *Requirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Requirement.Merge(dst, src)
}
func (m *Requirement) XXX_Size() int {
	return xxx_messageInfo_Requirement.Size(m)
}
func (m *Requirement) XXX_DiscardUnknown() {
	xxx_messageInfo_Requirement.DiscardUnknown(m)
}

var xxx_messageInfo_Requirement proto.InternalMessageInfo

func (m *Requirement) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Requirement) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Requirement) GetCopies() int32 {
	if m != nil {
		return m.Copies
	}
	return 0
}

type Response struct {
	Publisher            *Publisher `protobuf:"bytes,1,opt,name=publisher" json:"publisher,omitempty"`
	Availability         bool       `protobuf:"varint,2,opt,name=availability" json:"availability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_577a7dcfd2c303ff, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetPublisher() *Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *Response) GetAvailability() bool {
	if m != nil {
		return m.Availability
	}
	return false
}

func init() {
	proto.RegisterType((*Publisher)(nil), "publication.manager.publisher.Publisher")
	proto.RegisterMapType((map[string]bool)(nil), "publication.manager.publisher.Publisher.CategoryEntry")
	proto.RegisterType((*Requirement)(nil), "publication.manager.publisher.Requirement")
	proto.RegisterType((*Response)(nil), "publication.manager.publisher.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PublisherService service

type PublisherServiceClient interface {
	FindAvailable(ctx context.Context, in *Requirement, opts ...client.CallOption) (*Response, error)
}

type publisherServiceClient struct {
	c           client.Client
	serviceName string
}

func NewPublisherServiceClient(serviceName string, c client.Client) PublisherServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "publication.manager.publisher"
	}
	return &publisherServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *publisherServiceClient) FindAvailable(ctx context.Context, in *Requirement, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "PublisherService.FindAvailable", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PublisherService service

type PublisherServiceHandler interface {
	FindAvailable(context.Context, *Requirement, *Response) error
}

func RegisterPublisherServiceHandler(s server.Server, hdlr PublisherServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&PublisherService{hdlr}, opts...))
}

type PublisherService struct {
	PublisherServiceHandler
}

func (h *PublisherService) FindAvailable(ctx context.Context, in *Requirement, out *Response) error {
	return h.PublisherServiceHandler.FindAvailable(ctx, in, out)
}

func init() { proto.RegisterFile("proto/publisher.proto", fileDescriptor_publisher_577a7dcfd2c303ff) }

var fileDescriptor_publisher_577a7dcfd2c303ff = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x4b, 0xf3, 0x40,
	0x10, 0xfd, 0x92, 0x36, 0x6d, 0x3a, 0xfd, 0xfa, 0x51, 0x96, 0x4f, 0x59, 0x02, 0x4a, 0xc9, 0xc5,
	0xe0, 0x21, 0x42, 0x05, 0x11, 0x3d, 0x89, 0xd8, 0xb3, 0xac, 0x67, 0x0f, 0xdb, 0xed, 0x18, 0x17,
	0x93, 0xdd, 0x98, 0x5f, 0x10, 0xff, 0x2c, 0xff, 0x42, 0xc9, 0xa6, 0x4d, 0x5b, 0x0f, 0xd6, 0xdb,
	0xbe, 0x37, 0x33, 0x6f, 0xe6, 0x3d, 0x16, 0x8e, 0xd2, 0x4c, 0x17, 0xfa, 0x22, 0x2d, 0x97, 0xb1,
	0xcc, 0x5f, 0x31, 0x0b, 0x0d, 0x26, 0x27, 0x86, 0x10, 0xbc, 0x90, 0x5a, 0x85, 0x09, 0x57, 0x3c,
	0x6a, 0x4a, 0x9b, 0x26, 0xff, 0xd3, 0x86, 0xd1, 0xe3, 0x06, 0x91, 0x7f, 0x60, 0xcb, 0x15, 0xb5,
	0x66, 0x56, 0x30, 0x62, 0xb6, 0x5c, 0x11, 0x02, 0x7d, 0xc5, 0x13, 0xa4, 0xb6, 0x61, 0xcc, 0x9b,
	0x50, 0x18, 0x0a, 0x5d, 0xaa, 0x22, 0xab, 0x69, 0xcf, 0xd0, 0x1b, 0x48, 0x3c, 0x70, 0x63, 0xae,
	0xa2, 0x92, 0x47, 0x48, 0xfb, 0xa6, 0xd4, 0x61, 0xc2, 0xc0, 0x15, 0xbc, 0xc0, 0x48, 0x67, 0x35,
	0x75, 0x66, 0xbd, 0x60, 0x3c, 0xbf, 0x0a, 0x7f, 0xbc, 0x2c, 0xec, 0xae, 0x0a, 0xef, 0xd7, 0x83,
	0x0f, 0xcd, 0x16, 0xd6, 0xe9, 0x34, 0xfb, 0x04, 0x4f, 0xb9, 0x90, 0x45, 0x4d, 0x07, 0x33, 0x2b,
	0x70, 0x58, 0x87, 0xc9, 0x29, 0x80, 0xd0, 0x49, 0x22, 0x8b, 0x04, 0x55, 0x41, 0x87, 0xa6, 0xba,
	0xc3, 0x78, 0xb7, 0x30, 0xd9, 0x93, 0x25, 0x53, 0xe8, 0xbd, 0x61, 0xbd, 0xf6, 0xde, 0x3c, 0xc9,
	0x7f, 0x70, 0x2a, 0x1e, 0x97, 0xad, 0x7b, 0x97, 0xb5, 0xe0, 0xc6, 0xbe, 0xb6, 0xfc, 0x67, 0x18,
	0x33, 0x7c, 0x2f, 0x65, 0x86, 0x8d, 0xd6, 0x9e, 0x6f, 0xeb, 0x9b, 0x6f, 0x6f, 0xc7, 0x77, 0x9b,
	0xe2, 0xf6, 0xfe, 0x63, 0x18, 0x08, 0x9d, 0x4a, 0xcc, 0x4d, 0x90, 0x0e, 0x5b, 0x23, 0xbf, 0x02,
	0x97, 0x61, 0x9e, 0x6a, 0x95, 0x23, 0x59, 0xc0, 0xa8, 0x8b, 0xc4, 0x88, 0x8f, 0xe7, 0xc1, 0x6f,
	0x83, 0x63, 0xdb, 0x51, 0xe2, 0xc3, 0x5f, 0x5e, 0x71, 0x19, 0xf3, 0xa5, 0x8c, 0x9b, 0xbc, 0x5a,
	0x4f, 0x7b, 0xdc, 0xfc, 0x03, 0xa6, 0xdd, 0xec, 0x13, 0x66, 0x95, 0x14, 0x48, 0x5e, 0x60, 0xb2,
	0x90, 0x6a, 0x75, 0xd7, 0xf6, 0xc5, 0x48, 0xce, 0x0f, 0x6c, 0xdf, 0x09, 0xc6, 0x3b, 0x3b, 0xd8,
	0xdb, 0xba, 0xf4, 0xff, 0x2c, 0x07, 0xe6, 0xb7, 0x5e, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x84,
	0x80, 0x6f, 0x20, 0xc6, 0x02, 0x00, 0x00,
}
